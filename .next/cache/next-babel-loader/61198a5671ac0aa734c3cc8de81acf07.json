{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport { compose } from 'recompose';\nimport { connect } from 'react-redux';\nimport Page from '../containers/page';\nvar IndexPage = compose()(Page); // IndexPage.getInitialProps = async ({ store, req }) => {\n//   const isServer: boolean = !!req;\n//   const { todo } = store.getState();\n//   // we can add any custom data here\n//   // for examle, the data from api server\n//   // const response = await fetch('http://localhost:8000/data');\n//   // let data = response.json()\n//   // console.log(data)\n//   store.dispatch(addTodo(Object.assign(todo.item, {\n//     value: 'Hello World',\n//   })));\n//   return {\n//     isServer,\n//   };\n// }\n\nIndexPage.getInitialProps = function _callee(_ref) {\n  var store, req, isServer, data, response;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          store = _ref.store, req = _ref.req;\n          isServer = !!req;\n\n          if (!isServer) {\n            _context.next = 6;\n            break;\n          }\n\n          // in the NEXT.js server side, we can pass the server data\n          // this `query.articles` is passed from AppController\n          data = store.getState();\n          _context.next = 13;\n          break;\n\n        case 6:\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(fetch('http://localhost:8000/data'));\n\n        case 8:\n          response = _context.sent;\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 11:\n          data = _context.sent;\n          console.log(data);\n\n        case 13:\n          return _context.abrupt(\"return\", {\n            data: data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default connect()(IndexPage);","map":{"version":3,"sources":["/home/jirayu/project/js/test-app/pages/index.tsx"],"names":["compose","connect","Page","IndexPage","getInitialProps","store","req","isServer","data","getState","fetch","response","json","console","log"],"mappings":";AAIA,SAASA,OAAT,QAAwB,WAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AAQA,IAAMC,SAA8C,GAAGH,OAAO,GAAGE,IAAH,CAA9D,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEAC,SAAS,CAACC,eAAV,GAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,KAAT,QAASA,KAAT,EAAgBC,GAAhB,QAAgBA,GAAhB;AACpBC,UAAAA,QADoB,GACA,CAAC,CAACD,GADF;;AAAA,eAKtBC,QALsB;AAAA;AAAA;AAAA;;AAMxB;AACA;AACAC,UAAAA,IAAI,GAAGH,KAAK,CAACI,QAAN,EAAP;AARwB;AAAA;;AAAA;AAAA;AAAA,2CAWDC,KAAK,CAAC,4BAAD,CAXJ;;AAAA;AAWlBC,UAAAA,QAXkB;AAAA;AAAA,2CAYXA,QAAQ,CAACC,IAAT,EAZW;;AAAA;AAYxBJ,UAAAA,IAZwB;AAaxBK,UAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;;AAbwB;AAAA,2CAgBnB;AACLA,YAAAA,IAAI,EAAJA;AADK,WAhBmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B;;AAqBA,eAAeP,OAAO,GAAGE,SAAH,CAAtB","sourcesContent":["import {\n  NextPageContext,\n  NextComponentType,\n} from 'next';\nimport { compose } from 'recompose';\nimport { connect } from 'react-redux';\nimport Page from '../containers/page';\nimport { addTodo } from '../actions';\nimport { Store } from '../store';\n\ninterface IndexPageContext extends NextPageContext {\n  store: Store;\n}\n\nconst IndexPage: NextComponentType<IndexPageContext> = compose()(Page);\n\n// IndexPage.getInitialProps = async ({ store, req }) => {\n//   const isServer: boolean = !!req;\n//   const { todo } = store.getState();\n  \n//   // we can add any custom data here\n//   // for examle, the data from api server\n//   // const response = await fetch('http://localhost:8000/data');\n//   // let data = response.json()\n//   // console.log(data)\n//   store.dispatch(addTodo(Object.assign(todo.item, {\n//     value: 'Hello World',\n//   })));\n\n//   return {\n//     isServer,\n//   };\n// }\n\nIndexPage.getInitialProps = async ({ store, req }) => {\n  const isServer: boolean = !!req;\n  \n  let data;\n\n  if (isServer) {\n    // in the NEXT.js server side, we can pass the server data\n    // this `query.articles` is passed from AppController\n    data = store.getState();\n  } else {\n    // in the NEXT.js client side, we need to fetch the same data above\n    const response = await fetch('http://localhost:8000/data');\n    data = await response.json();\n    console.log(data)\n  }\n\n  return {\n    data,\n  };\n}\n\nexport default connect()(IndexPage);\n"]},"metadata":{},"sourceType":"module"}