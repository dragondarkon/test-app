{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { compose } from 'recompose';\nimport { connect } from 'react-redux';\nimport Page from '../containers/page';\nimport { addTodo } from '../actions';\nimport fetch from 'isomorphic-unfetch';\nvar IndexPage = compose()(Page);\n\nIndexPage.getInitialProps = function _callee(_ref) {\n  var store, req, isServer, _store$getState, todo, res, datas;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          store = _ref.store, req = _ref.req;\n          isServer = !!req;\n          _store$getState = store.getState(), todo = _store$getState.todo;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(fetch('http://localhost:8000/data'));\n\n        case 5:\n          res = _context.sent;\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 8:\n          datas = _context.sent;\n          // we can add any custom data here\n          // for examle, the data from api server\n          datas.map(function (data) {\n            return store.dispatch(addTodo(_Object$assign(todo.item, {\n              value: data.text\n            })));\n          }); // datas.map((data) =>  {\n          //   store.dispatch(addTodo(Object.assign(todo, {\n          //     value: data.text,\n          //   })));\n          // })\n          // store.dispatch(addTodo(Object.assign(todo, {\n          //   value: 'Hello World',\n          // })));\n\n          return _context.abrupt(\"return\", {\n            isServer: isServer\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default connect()(IndexPage);","map":{"version":3,"sources":["/home/jirayu/project/js/test-app/pages/index.tsx"],"names":["compose","connect","Page","addTodo","fetch","IndexPage","getInitialProps","store","req","isServer","getState","todo","res","json","datas","map","data","dispatch","item","value","text"],"mappings":";;AAIA,SAASA,OAAT,QAAwB,WAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,OAAT,QAAwB,YAAxB;AAEA,OAAOC,KAAP,MAAkB,oBAAlB;AAMA,IAAMC,SAA8C,GAAGL,OAAO,GAAGE,IAAH,CAA9D;;AAEAG,SAAS,CAACC,eAAV,GAA4B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,KAAT,QAASA,KAAT,EAAgBC,GAAhB,QAAgBA,GAAhB;AACpBC,UAAAA,QADoB,GACA,CAAC,CAACD,GADF;AAAA,4BAETD,KAAK,CAACG,QAAN,EAFS,EAElBC,IAFkB,mBAElBA,IAFkB;AAAA;AAAA,2CAGRP,KAAK,CAAC,4BAAD,CAHG;;AAAA;AAGpBQ,UAAAA,GAHoB;AAAA;AAAA,2CAINA,GAAG,CAACC,IAAJ,EAJM;;AAAA;AAIpBC,UAAAA,KAJoB;AAM1B;AACA;AACAA,UAAAA,KAAK,CAACC,GAAN,CAAW,UAAAC,IAAI;AAAA,mBAAIT,KAAK,CAACU,QAAN,CAAed,OAAO,CAAC,eAAcQ,IAAI,CAACO,IAAnB,EAAyB;AAC/DC,cAAAA,KAAK,EAAEH,IAAI,CAACI;AADmD,aAAzB,CAAD,CAAtB,CAAJ;AAAA,WAAf,EAR0B,CAa1B;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AArB0B,2CAuBnB;AACLX,YAAAA,QAAQ,EAARA;AADK,WAvBmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B;;AA4BA,eAAeR,OAAO,GAAGI,SAAH,CAAtB","sourcesContent":["import {\n  NextPageContext,\n  NextComponentType,\n} from 'next';\nimport { compose } from 'recompose';\nimport { connect } from 'react-redux';\nimport Page from '../containers/page';\nimport { addTodo } from '../actions';\nimport { Store } from '../store';\nimport fetch from 'isomorphic-unfetch';\n\ninterface IndexPageContext extends NextPageContext {\n  store: Store;\n}\n\nconst IndexPage: NextComponentType<IndexPageContext> = compose()(Page);\n\nIndexPage.getInitialProps = async ({ store, req }) => {\n  const isServer: boolean = !!req;\n  const { todo } = store.getState();\n  const res = await fetch('http://localhost:8000/data');\n  const datas = await res.json();\n\n  // we can add any custom data here\n  // for examle, the data from api server\n  datas.map((data => store.dispatch(addTodo(Object.assign(todo.item, {\n      value: data.text,\n    }))))\n  )\n\n  // datas.map((data) =>  {\n  //   store.dispatch(addTodo(Object.assign(todo, {\n  //     value: data.text,\n  //   })));\n  // })\n  \n  // store.dispatch(addTodo(Object.assign(todo, {\n  //   value: 'Hello World',\n  // })));\n\n  return {\n    isServer,\n  };\n}\n\nexport default connect()(IndexPage);\n"]},"metadata":{},"sourceType":"module"}