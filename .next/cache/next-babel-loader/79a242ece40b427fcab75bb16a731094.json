{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { compose } from 'recompose';\nimport { connect } from 'react-redux';\nimport Page from '../containers/page';\nimport { addTodo } from '../actions';\nvar IndexPage = compose()(Page);\n\nIndexPage.getInitialProps = function _callee(_ref) {\n  var store, req, isServer, _store$getState, todo;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          store = _ref.store, req = _ref.req;\n          isServer = !!req;\n          _store$getState = store.getState(), todo = _store$getState.todo; // we can add any custom data here\n          // for examle, the data from api server\n\n          _context.t0 = store;\n          _context.t1 = addTodo;\n          _context.t2 = _Object$assign;\n          _context.t3 = todo.item;\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(fetch('http://localhost:8000/data'));\n\n        case 9:\n          _context.t4 = _context.sent;\n          _context.t5 = {\n            value: _context.t4\n          };\n          _context.t6 = (0, _context.t2)(_context.t3, _context.t5);\n          _context.t7 = (0, _context.t1)(_context.t6);\n\n          _context.t0.dispatch.call(_context.t0, _context.t7);\n\n          return _context.abrupt(\"return\", {\n            isServer: isServer\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default connect()(IndexPage);","map":{"version":3,"sources":["/home/jirayu/project/js/test-app/pages/index.tsx"],"names":["compose","connect","Page","addTodo","IndexPage","getInitialProps","store","req","isServer","getState","todo","item","fetch","value","dispatch"],"mappings":";;AAIA,SAASA,OAAT,QAAwB,WAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,OAAT,QAAwB,YAAxB;AAOA,IAAMC,SAA8C,GAAGJ,OAAO,GAAGE,IAAH,CAA9D;;AAEAE,SAAS,CAACC,eAAV,GAA4B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,KAAT,QAASA,KAAT,EAAgBC,GAAhB,QAAgBA,GAAhB;AACpBC,UAAAA,QADoB,GACA,CAAC,CAACD,GADF;AAAA,4BAETD,KAAK,CAACG,QAAN,EAFS,EAElBC,IAFkB,mBAElBA,IAFkB,EAI1B;AACA;;AAL0B,wBAO1BJ,KAP0B;AAAA,wBAOXH,OAPW;AAAA;AAAA,wBAOWO,IAAI,CAACC,IAPhB;AAAA;AAAA,2CAQXC,KAAK,CAAC,4BAAD,CARM;;AAAA;AAAA;AAAA;AAQxBC,YAAAA,KARwB;AAAA;AAAA;AAAA;;AAAA,sBAOpBC,QAPoB;;AAAA,2CAWnB;AACLN,YAAAA,QAAQ,EAARA;AADK,WAXmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B;;AAgBA,eAAeP,OAAO,GAAGG,SAAH,CAAtB","sourcesContent":["import {\n  NextPageContext,\n  NextComponentType,\n} from 'next';\nimport { compose } from 'recompose';\nimport { connect } from 'react-redux';\nimport Page from '../containers/page';\nimport { addTodo } from '../actions';\nimport { Store } from '../store';\n\ninterface IndexPageContext extends NextPageContext {\n  store: Store;\n}\n\nconst IndexPage: NextComponentType<IndexPageContext> = compose()(Page);\n\nIndexPage.getInitialProps = async ({ store, req }) => {\n  const isServer: boolean = !!req;\n  const { todo } = store.getState();\n  \n  // we can add any custom data here\n  // for examle, the data from api server\n  \n  store.dispatch(addTodo(Object.assign(todo.item, {\n    value: await fetch('http://localhost:8000/data'),\n  })));\n\n  return {\n    isServer,\n  };\n}\n\nexport default connect()(IndexPage);\n"]},"metadata":{},"sourceType":"module"}