{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport { compose } from 'recompose';\nimport { connect } from 'react-redux';\nimport Page from '../containers/page';\nimport fetch from 'isomorphic-unfetch';\nvar IndexPage = compose()(Page);\n\nIndexPage.getInitialProps = function _callee(_ref) {\n  var store, req, isServer, _store$getState, todo, res, datas, result;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          store = _ref.store, req = _ref.req;\n          isServer = !!req;\n          _store$getState = store.getState(), todo = _store$getState.todo; // we can add any custom data here\n          // for examle, the data from api server\n\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(fetch('http://localhost:8000/data'));\n\n        case 5:\n          res = _context.sent;\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 8:\n          datas = _context.sent;\n          console.log(\"Show data fetched. Count: \".concat(datas.length));\n          result = datas.map(function (data) {\n            return data.text;\n          });\n          return _context.abrupt(\"return\", {\n            isServer: isServer,\n            result: result\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default connect()(IndexPage);","map":{"version":3,"sources":["/home/jirayu/project/js/test-app/pages/index.tsx"],"names":["compose","connect","Page","fetch","IndexPage","getInitialProps","store","req","isServer","getState","todo","res","json","datas","console","log","length","result","map","data","text"],"mappings":";AAIA,SAASA,OAAT,QAAwB,WAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AAGA,OAAOC,KAAP,MAAkB,oBAAlB;AAMA,IAAMC,SAA8C,GAAGJ,OAAO,GAAGE,IAAH,CAA9D;;AAEAE,SAAS,CAACC,eAAV,GAA4B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,KAAT,QAASA,KAAT,EAAgBC,GAAhB,QAAgBA,GAAhB;AACpBC,UAAAA,QADoB,GACA,CAAC,CAACD,GADF;AAAA,4BAETD,KAAK,CAACG,QAAN,EAFS,EAElBC,IAFkB,mBAElBA,IAFkB,EAI1B;AACA;;AAL0B;AAAA,2CAMRP,KAAK,CAAC,4BAAD,CANG;;AAAA;AAMpBQ,UAAAA,GANoB;AAAA;AAAA,2CAONA,GAAG,CAACC,IAAJ,EAPM;;AAAA;AAOpBC,UAAAA,KAPoB;AAQ1BC,UAAAA,OAAO,CAACC,GAAR,qCAAyCF,KAAK,CAACG,MAA/C;AACIC,UAAAA,MATsB,GASbJ,KAAK,CAACK,GAAN,CAAU,UAACC,IAAD,EAAU;AAC/B,mBAAOA,IAAI,CAACC,IAAZ;AACD,WAFY,CATa;AAAA,2CAYnB;AACLZ,YAAAA,QAAQ,EAARA,QADK;AAELS,YAAAA,MAAM,EAANA;AAFK,WAZmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B;;AAkBA,eAAehB,OAAO,GAAGG,SAAH,CAAtB","sourcesContent":["import {\n  NextPageContext,\n  NextComponentType,\n} from 'next';\nimport { compose } from 'recompose';\nimport { connect } from 'react-redux';\nimport Page from '../containers/page';\nimport { addTodo } from '../actions';\nimport { Store } from '../store';\nimport fetch from 'isomorphic-unfetch';\n\ninterface IndexPageContext extends NextPageContext {\n  store: Store;\n}\n\nconst IndexPage: NextComponentType<IndexPageContext> = compose()(Page);\n\nIndexPage.getInitialProps = async ({ store, req }) => {\n  const isServer: boolean = !!req;\n  const { todo } = store.getState();\n\n  // we can add any custom data here\n  // for examle, the data from api server\n  const res = await fetch('http://localhost:8000/data');\n  const datas = await res.json();\n  console.log(`Show data fetched. Count: ${datas.length}`);\n  let result = datas.map((data) => {\n    return data.text\n  })\n  return {\n    isServer,\n    result,\n  };\n}\n\nexport default connect()(IndexPage);\n"]},"metadata":{},"sourceType":"module"}